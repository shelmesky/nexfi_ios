// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Frames.pb.h"
// @@protoc_insertion_point(imports)

@implementation FramesRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FramesRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Frame ()
@property FrameKind kind;
@property (strong) HelloFrame* hello;
@property (strong) HeartbeatFrame* heartbeat;
@property (strong) PayloadFrame* payload;
@property (strong) PortsFrame* ports;
@property (strong) ConnectedFrame* connected;
@property (strong) DisconnectedFrame* disconnected;
@end

@implementation Frame

- (BOOL) hasKind {
  return !!hasKind_;
}
- (void) setHasKind:(BOOL) _value_ {
  hasKind_ = !!_value_;
}
@synthesize kind;
- (BOOL) hasHello {
  return !!hasHello_;
}
- (void) setHasHello:(BOOL) _value_ {
  hasHello_ = !!_value_;
}
@synthesize hello;
- (BOOL) hasHeartbeat {
  return !!hasHeartbeat_;
}
- (void) setHasHeartbeat:(BOOL) _value_ {
  hasHeartbeat_ = !!_value_;
}
@synthesize heartbeat;
- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) _value_ {
  hasPayload_ = !!_value_;
}
@synthesize payload;
- (BOOL) hasPorts {
  return !!hasPorts_;
}
- (void) setHasPorts:(BOOL) _value_ {
  hasPorts_ = !!_value_;
}
@synthesize ports;
- (BOOL) hasConnected {
  return !!hasConnected_;
}
- (void) setHasConnected:(BOOL) _value_ {
  hasConnected_ = !!_value_;
}
@synthesize connected;
- (BOOL) hasDisconnected {
  return !!hasDisconnected_;
}
- (void) setHasDisconnected:(BOOL) _value_ {
  hasDisconnected_ = !!_value_;
}
@synthesize disconnected;
- (instancetype) init {
  if ((self = [super init])) {
    self.kind = FrameKindHello;
    self.hello = [HelloFrame defaultInstance];
    self.heartbeat = [HeartbeatFrame defaultInstance];
    self.payload = [PayloadFrame defaultInstance];
    self.ports = [PortsFrame defaultInstance];
    self.connected = [ConnectedFrame defaultInstance];
    self.disconnected = [DisconnectedFrame defaultInstance];
  }
  return self;
}
static Frame* defaultFrameInstance = nil;
+ (void) initialize {
  if (self == [Frame class]) {
    defaultFrameInstance = [[Frame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKind) {
    return NO;
  }
  if (self.hasHello) {
    if (!self.hello.isInitialized) {
      return NO;
    }
  }
  if (self.hasPayload) {
    if (!self.payload.isInitialized) {
      return NO;
    }
  }
  if (self.hasPorts) {
    if (!self.ports.isInitialized) {
      return NO;
    }
  }
  if (self.hasConnected) {
    if (!self.connected.isInitialized) {
      return NO;
    }
  }
  if (self.hasDisconnected) {
    if (!self.disconnected.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKind) {
    [output writeEnum:1 value:self.kind];
  }
  if (self.hasHello) {
    [output writeMessage:51 value:self.hello];
  }
  if (self.hasHeartbeat) {
    [output writeMessage:52 value:self.heartbeat];
  }
  if (self.hasPayload) {
    [output writeMessage:53 value:self.payload];
  }
  if (self.hasPorts) {
    [output writeMessage:54 value:self.ports];
  }
  if (self.hasConnected) {
    [output writeMessage:55 value:self.connected];
  }
  if (self.hasDisconnected) {
    [output writeMessage:56 value:self.disconnected];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKind) {
    size_ += computeEnumSize(1, self.kind);
  }
  if (self.hasHello) {
    size_ += computeMessageSize(51, self.hello);
  }
  if (self.hasHeartbeat) {
    size_ += computeMessageSize(52, self.heartbeat);
  }
  if (self.hasPayload) {
    size_ += computeMessageSize(53, self.payload);
  }
  if (self.hasPorts) {
    size_ += computeMessageSize(54, self.ports);
  }
  if (self.hasConnected) {
    size_ += computeMessageSize(55, self.connected);
  }
  if (self.hasDisconnected) {
    size_ += computeMessageSize(56, self.disconnected);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Frame*) parseFromData:(NSData*) data {
  return (Frame*)[[[Frame builder] mergeFromData:data] build];
}
+ (Frame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Frame*)[[[Frame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Frame*) parseFromInputStream:(NSInputStream*) input {
  return (Frame*)[[[Frame builder] mergeFromInputStream:input] build];
}
+ (Frame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Frame*)[[[Frame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Frame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Frame*)[[[Frame builder] mergeFromCodedInputStream:input] build];
}
+ (Frame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Frame*)[[[Frame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FrameBuilder*) builder {
  return [[FrameBuilder alloc] init];
}
+ (FrameBuilder*) builderWithPrototype:(Frame*) prototype {
  return [[Frame builder] mergeFrom:prototype];
}
- (FrameBuilder*) builder {
  return [Frame builder];
}
- (FrameBuilder*) toBuilder {
  return [Frame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKind) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kind", NSStringFromFrameKind(self.kind)];
  }
  if (self.hasHello) {
    [output appendFormat:@"%@%@ {\n", indent, @"hello"];
    [self.hello writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasHeartbeat) {
    [output appendFormat:@"%@%@ {\n", indent, @"heartbeat"];
    [self.heartbeat writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPayload) {
    [output appendFormat:@"%@%@ {\n", indent, @"payload"];
    [self.payload writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasPorts) {
    [output appendFormat:@"%@%@ {\n", indent, @"ports"];
    [self.ports writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConnected) {
    [output appendFormat:@"%@%@ {\n", indent, @"connected"];
    [self.connected writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDisconnected) {
    [output appendFormat:@"%@%@ {\n", indent, @"disconnected"];
    [self.disconnected writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKind) {
    [dictionary setObject: @(self.kind) forKey: @"kind"];
  }
  if (self.hasHello) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.hello storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"hello"];
  }
  if (self.hasHeartbeat) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.heartbeat storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"heartbeat"];
  }
  if (self.hasPayload) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.payload storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"payload"];
  }
  if (self.hasPorts) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.ports storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"ports"];
  }
  if (self.hasConnected) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.connected storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"connected"];
  }
  if (self.hasDisconnected) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.disconnected storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"disconnected"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Frame class]]) {
    return NO;
  }
  Frame *otherMessage = other;
  return
      self.hasKind == otherMessage.hasKind &&
      (!self.hasKind || self.kind == otherMessage.kind) &&
      self.hasHello == otherMessage.hasHello &&
      (!self.hasHello || [self.hello isEqual:otherMessage.hello]) &&
      self.hasHeartbeat == otherMessage.hasHeartbeat &&
      (!self.hasHeartbeat || [self.heartbeat isEqual:otherMessage.heartbeat]) &&
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      self.hasPorts == otherMessage.hasPorts &&
      (!self.hasPorts || [self.ports isEqual:otherMessage.ports]) &&
      self.hasConnected == otherMessage.hasConnected &&
      (!self.hasConnected || [self.connected isEqual:otherMessage.connected]) &&
      self.hasDisconnected == otherMessage.hasDisconnected &&
      (!self.hasDisconnected || [self.disconnected isEqual:otherMessage.disconnected]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKind) {
    hashCode = hashCode * 31 + self.kind;
  }
  if (self.hasHello) {
    hashCode = hashCode * 31 + [self.hello hash];
  }
  if (self.hasHeartbeat) {
    hashCode = hashCode * 31 + [self.heartbeat hash];
  }
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  if (self.hasPorts) {
    hashCode = hashCode * 31 + [self.ports hash];
  }
  if (self.hasConnected) {
    hashCode = hashCode * 31 + [self.connected hash];
  }
  if (self.hasDisconnected) {
    hashCode = hashCode * 31 + [self.disconnected hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL FrameKindIsValidValue(FrameKind value) {
  switch (value) {
    case FrameKindHello:
    case FrameKindHeartbeat:
    case FrameKindPayload:
    case FrameKindPorts:
    case FrameKindConnected:
    case FrameKindDisconnected:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromFrameKind(FrameKind value) {
  switch (value) {
    case FrameKindHello:
      return @"FrameKindHello";
    case FrameKindHeartbeat:
      return @"FrameKindHeartbeat";
    case FrameKindPayload:
      return @"FrameKindPayload";
    case FrameKindPorts:
      return @"FrameKindPorts";
    case FrameKindConnected:
      return @"FrameKindConnected";
    case FrameKindDisconnected:
      return @"FrameKindDisconnected";
    default:
      return nil;
  }
}

@interface FrameBuilder()
@property (strong) Frame* resultFrame;
@end

@implementation FrameBuilder
@synthesize resultFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFrame = [[Frame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFrame;
}
- (FrameBuilder*) clear {
  self.resultFrame = [[Frame alloc] init];
  return self;
}
- (FrameBuilder*) clone {
  return [Frame builderWithPrototype:resultFrame];
}
- (Frame*) defaultInstance {
  return [Frame defaultInstance];
}
- (Frame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Frame*) buildPartial {
  Frame* returnMe = resultFrame;
  self.resultFrame = nil;
  return returnMe;
}
- (FrameBuilder*) mergeFrom:(Frame*) other {
  if (other == [Frame defaultInstance]) {
    return self;
  }
  if (other.hasKind) {
    [self setKind:other.kind];
  }
  if (other.hasHello) {
    [self mergeHello:other.hello];
  }
  if (other.hasHeartbeat) {
    [self mergeHeartbeat:other.heartbeat];
  }
  if (other.hasPayload) {
    [self mergePayload:other.payload];
  }
  if (other.hasPorts) {
    [self mergePorts:other.ports];
  }
  if (other.hasConnected) {
    [self mergeConnected:other.connected];
  }
  if (other.hasDisconnected) {
    [self mergeDisconnected:other.disconnected];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        FrameKind value = (FrameKind)[input readEnum];
        if (FrameKindIsValidValue(value)) {
          [self setKind:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 410: {
        HelloFrameBuilder* subBuilder = [HelloFrame builder];
        if (self.hasHello) {
          [subBuilder mergeFrom:self.hello];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHello:[subBuilder buildPartial]];
        break;
      }
      case 418: {
        HeartbeatFrameBuilder* subBuilder = [HeartbeatFrame builder];
        if (self.hasHeartbeat) {
          [subBuilder mergeFrom:self.heartbeat];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeartbeat:[subBuilder buildPartial]];
        break;
      }
      case 426: {
        PayloadFrameBuilder* subBuilder = [PayloadFrame builder];
        if (self.hasPayload) {
          [subBuilder mergeFrom:self.payload];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPayload:[subBuilder buildPartial]];
        break;
      }
      case 434: {
        PortsFrameBuilder* subBuilder = [PortsFrame builder];
        if (self.hasPorts) {
          [subBuilder mergeFrom:self.ports];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPorts:[subBuilder buildPartial]];
        break;
      }
      case 442: {
        ConnectedFrameBuilder* subBuilder = [ConnectedFrame builder];
        if (self.hasConnected) {
          [subBuilder mergeFrom:self.connected];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConnected:[subBuilder buildPartial]];
        break;
      }
      case 450: {
        DisconnectedFrameBuilder* subBuilder = [DisconnectedFrame builder];
        if (self.hasDisconnected) {
          [subBuilder mergeFrom:self.disconnected];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDisconnected:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasKind {
  return resultFrame.hasKind;
}
- (FrameKind) kind {
  return resultFrame.kind;
}
- (FrameBuilder*) setKind:(FrameKind) value {
  resultFrame.hasKind = YES;
  resultFrame.kind = value;
  return self;
}
- (FrameBuilder*) clearKind {
  resultFrame.hasKind = NO;
  resultFrame.kind = FrameKindHello;
  return self;
}
- (BOOL) hasHello {
  return resultFrame.hasHello;
}
- (HelloFrame*) hello {
  return resultFrame.hello;
}
- (FrameBuilder*) setHello:(HelloFrame*) value {
  resultFrame.hasHello = YES;
  resultFrame.hello = value;
  return self;
}
- (FrameBuilder*) setHelloBuilder:(HelloFrameBuilder*) builderForValue {
  return [self setHello:[builderForValue build]];
}
- (FrameBuilder*) mergeHello:(HelloFrame*) value {
  if (resultFrame.hasHello &&
      resultFrame.hello != [HelloFrame defaultInstance]) {
    resultFrame.hello =
      [[[HelloFrame builderWithPrototype:resultFrame.hello] mergeFrom:value] buildPartial];
  } else {
    resultFrame.hello = value;
  }
  resultFrame.hasHello = YES;
  return self;
}
- (FrameBuilder*) clearHello {
  resultFrame.hasHello = NO;
  resultFrame.hello = [HelloFrame defaultInstance];
  return self;
}
- (BOOL) hasHeartbeat {
  return resultFrame.hasHeartbeat;
}
- (HeartbeatFrame*) heartbeat {
  return resultFrame.heartbeat;
}
- (FrameBuilder*) setHeartbeat:(HeartbeatFrame*) value {
  resultFrame.hasHeartbeat = YES;
  resultFrame.heartbeat = value;
  return self;
}
- (FrameBuilder*) setHeartbeatBuilder:(HeartbeatFrameBuilder*) builderForValue {
  return [self setHeartbeat:[builderForValue build]];
}
- (FrameBuilder*) mergeHeartbeat:(HeartbeatFrame*) value {
  if (resultFrame.hasHeartbeat &&
      resultFrame.heartbeat != [HeartbeatFrame defaultInstance]) {
    resultFrame.heartbeat =
      [[[HeartbeatFrame builderWithPrototype:resultFrame.heartbeat] mergeFrom:value] buildPartial];
  } else {
    resultFrame.heartbeat = value;
  }
  resultFrame.hasHeartbeat = YES;
  return self;
}
- (FrameBuilder*) clearHeartbeat {
  resultFrame.hasHeartbeat = NO;
  resultFrame.heartbeat = [HeartbeatFrame defaultInstance];
  return self;
}
- (BOOL) hasPayload {
  return resultFrame.hasPayload;
}
- (PayloadFrame*) payload {
  return resultFrame.payload;
}
- (FrameBuilder*) setPayload:(PayloadFrame*) value {
  resultFrame.hasPayload = YES;
  resultFrame.payload = value;
  return self;
}
- (FrameBuilder*) setPayloadBuilder:(PayloadFrameBuilder*) builderForValue {
  return [self setPayload:[builderForValue build]];
}
- (FrameBuilder*) mergePayload:(PayloadFrame*) value {
  if (resultFrame.hasPayload &&
      resultFrame.payload != [PayloadFrame defaultInstance]) {
    resultFrame.payload =
      [[[PayloadFrame builderWithPrototype:resultFrame.payload] mergeFrom:value] buildPartial];
  } else {
    resultFrame.payload = value;
  }
  resultFrame.hasPayload = YES;
  return self;
}
- (FrameBuilder*) clearPayload {
  resultFrame.hasPayload = NO;
  resultFrame.payload = [PayloadFrame defaultInstance];
  return self;
}
- (BOOL) hasPorts {
  return resultFrame.hasPorts;
}
- (PortsFrame*) ports {
  return resultFrame.ports;
}
- (FrameBuilder*) setPorts:(PortsFrame*) value {
  resultFrame.hasPorts = YES;
  resultFrame.ports = value;
  return self;
}
- (FrameBuilder*) setPortsBuilder:(PortsFrameBuilder*) builderForValue {
  return [self setPorts:[builderForValue build]];
}
- (FrameBuilder*) mergePorts:(PortsFrame*) value {
  if (resultFrame.hasPorts &&
      resultFrame.ports != [PortsFrame defaultInstance]) {
    resultFrame.ports =
      [[[PortsFrame builderWithPrototype:resultFrame.ports] mergeFrom:value] buildPartial];
  } else {
    resultFrame.ports = value;
  }
  resultFrame.hasPorts = YES;
  return self;
}
- (FrameBuilder*) clearPorts {
  resultFrame.hasPorts = NO;
  resultFrame.ports = [PortsFrame defaultInstance];
  return self;
}
- (BOOL) hasConnected {
  return resultFrame.hasConnected;
}
- (ConnectedFrame*) connected {
  return resultFrame.connected;
}
- (FrameBuilder*) setConnected:(ConnectedFrame*) value {
  resultFrame.hasConnected = YES;
  resultFrame.connected = value;
  return self;
}
- (FrameBuilder*) setConnectedBuilder:(ConnectedFrameBuilder*) builderForValue {
  return [self setConnected:[builderForValue build]];
}
- (FrameBuilder*) mergeConnected:(ConnectedFrame*) value {
  if (resultFrame.hasConnected &&
      resultFrame.connected != [ConnectedFrame defaultInstance]) {
    resultFrame.connected =
      [[[ConnectedFrame builderWithPrototype:resultFrame.connected] mergeFrom:value] buildPartial];
  } else {
    resultFrame.connected = value;
  }
  resultFrame.hasConnected = YES;
  return self;
}
- (FrameBuilder*) clearConnected {
  resultFrame.hasConnected = NO;
  resultFrame.connected = [ConnectedFrame defaultInstance];
  return self;
}
- (BOOL) hasDisconnected {
  return resultFrame.hasDisconnected;
}
- (DisconnectedFrame*) disconnected {
  return resultFrame.disconnected;
}
- (FrameBuilder*) setDisconnected:(DisconnectedFrame*) value {
  resultFrame.hasDisconnected = YES;
  resultFrame.disconnected = value;
  return self;
}
- (FrameBuilder*) setDisconnectedBuilder:(DisconnectedFrameBuilder*) builderForValue {
  return [self setDisconnected:[builderForValue build]];
}
- (FrameBuilder*) mergeDisconnected:(DisconnectedFrame*) value {
  if (resultFrame.hasDisconnected &&
      resultFrame.disconnected != [DisconnectedFrame defaultInstance]) {
    resultFrame.disconnected =
      [[[DisconnectedFrame builderWithPrototype:resultFrame.disconnected] mergeFrom:value] buildPartial];
  } else {
    resultFrame.disconnected = value;
  }
  resultFrame.hasDisconnected = YES;
  return self;
}
- (FrameBuilder*) clearDisconnected {
  resultFrame.hasDisconnected = NO;
  resultFrame.disconnected = [DisconnectedFrame defaultInstance];
  return self;
}
@end

@interface Peer ()
@property (strong) NSData* address;
@property BOOL legacy;
@property (strong) PBAppendableArray * portsArray;
@end

@implementation Peer

- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (BOOL) hasLegacy {
  return !!hasLegacy_;
}
- (void) setHasLegacy:(BOOL) _value_ {
  hasLegacy_ = !!_value_;
}
- (BOOL) legacy {
  return !!legacy_;
}
- (void) setLegacy:(BOOL) _value_ {
  legacy_ = !!_value_;
}
@synthesize portsArray;
@dynamic ports;
- (instancetype) init {
  if ((self = [super init])) {
    self.address = [NSData data];
    self.legacy = NO;
  }
  return self;
}
static Peer* defaultPeerInstance = nil;
+ (void) initialize {
  if (self == [Peer class]) {
    defaultPeerInstance = [[Peer alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPeerInstance;
}
- (instancetype) defaultInstance {
  return defaultPeerInstance;
}
- (PBArray *)ports {
  return portsArray;
}
- (SInt32)portsAtIndex:(NSUInteger)index {
  return [portsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAddress) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAddress) {
    [output writeData:1 value:self.address];
  }
  if (self.hasLegacy) {
    [output writeBool:2 value:self.legacy];
  }
  const NSUInteger portsArrayCount = self.portsArray.count;
  if (portsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.portsArray.data;
    for (NSUInteger i = 0; i < portsArrayCount; ++i) {
      [output writeInt32:3 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAddress) {
    size_ += computeDataSize(1, self.address);
  }
  if (self.hasLegacy) {
    size_ += computeBoolSize(2, self.legacy);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.portsArray.count;
    const SInt32 *values = (const SInt32 *)self.portsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Peer*) parseFromData:(NSData*) data {
  return (Peer*)[[[Peer builder] mergeFromData:data] build];
}
+ (Peer*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Peer*)[[[Peer builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Peer*) parseFromInputStream:(NSInputStream*) input {
  return (Peer*)[[[Peer builder] mergeFromInputStream:input] build];
}
+ (Peer*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Peer*)[[[Peer builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Peer*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Peer*)[[[Peer builder] mergeFromCodedInputStream:input] build];
}
+ (Peer*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Peer*)[[[Peer builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PeerBuilder*) builder {
  return [[PeerBuilder alloc] init];
}
+ (PeerBuilder*) builderWithPrototype:(Peer*) prototype {
  return [[Peer builder] mergeFrom:prototype];
}
- (PeerBuilder*) builder {
  return [Peer builder];
}
- (PeerBuilder*) toBuilder {
  return [Peer builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  if (self.hasLegacy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"legacy", [NSNumber numberWithBool:self.legacy]];
  }
  [self.portsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ports", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  if (self.hasLegacy) {
    [dictionary setObject: [NSNumber numberWithBool:self.legacy] forKey: @"legacy"];
  }
  NSMutableArray * portsArrayArray = [NSMutableArray new];
  NSUInteger portsArrayCount=self.portsArray.count;
  for(int i=0;i<portsArrayCount;i++){
    [portsArrayArray addObject: @([self.portsArray int32AtIndex:i])];
  }
  [dictionary setObject: portsArrayArray forKey: @"ports"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Peer class]]) {
    return NO;
  }
  Peer *otherMessage = other;
  return
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      self.hasLegacy == otherMessage.hasLegacy &&
      (!self.hasLegacy || self.legacy == otherMessage.legacy) &&
      [self.portsArray isEqualToArray:otherMessage.portsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  if (self.hasLegacy) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.legacy] hash];
  }
  [self.portsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PeerBuilder()
@property (strong) Peer* resultPeer;
@end

@implementation PeerBuilder
@synthesize resultPeer;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPeer = [[Peer alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPeer;
}
- (PeerBuilder*) clear {
  self.resultPeer = [[Peer alloc] init];
  return self;
}
- (PeerBuilder*) clone {
  return [Peer builderWithPrototype:resultPeer];
}
- (Peer*) defaultInstance {
  return [Peer defaultInstance];
}
- (Peer*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Peer*) buildPartial {
  Peer* returnMe = resultPeer;
  self.resultPeer = nil;
  return returnMe;
}
- (PeerBuilder*) mergeFrom:(Peer*) other {
  if (other == [Peer defaultInstance]) {
    return self;
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasLegacy) {
    [self setLegacy:other.legacy];
  }
  if (other.portsArray.count > 0) {
    if (resultPeer.portsArray == nil) {
      resultPeer.portsArray = [other.portsArray copy];
    } else {
      [resultPeer.portsArray appendArray:other.portsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PeerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PeerBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAddress:[input readData]];
        break;
      }
      case 16: {
        [self setLegacy:[input readBool]];
        break;
      }
      case 24: {
        [self addPorts:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAddress {
  return resultPeer.hasAddress;
}
- (NSData*) address {
  return resultPeer.address;
}
- (PeerBuilder*) setAddress:(NSData*) value {
  resultPeer.hasAddress = YES;
  resultPeer.address = value;
  return self;
}
- (PeerBuilder*) clearAddress {
  resultPeer.hasAddress = NO;
  resultPeer.address = [NSData data];
  return self;
}
- (BOOL) hasLegacy {
  return resultPeer.hasLegacy;
}
- (BOOL) legacy {
  return resultPeer.legacy;
}
- (PeerBuilder*) setLegacy:(BOOL) value {
  resultPeer.hasLegacy = YES;
  resultPeer.legacy = value;
  return self;
}
- (PeerBuilder*) clearLegacy {
  resultPeer.hasLegacy = NO;
  resultPeer.legacy = NO;
  return self;
}
- (PBAppendableArray *)ports {
  return resultPeer.portsArray;
}
- (SInt32)portsAtIndex:(NSUInteger)index {
  return [resultPeer portsAtIndex:index];
}
- (PeerBuilder *)addPorts:(SInt32)value {
  if (resultPeer.portsArray == nil) {
    resultPeer.portsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPeer.portsArray addInt32:value];
  return self;
}
- (PeerBuilder *)setPortsArray:(NSArray *)array {
  resultPeer.portsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PeerBuilder *)setPortsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPeer.portsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PeerBuilder *)clearPorts {
  resultPeer.portsArray = nil;
  return self;
}
@end

@interface HelloFrame ()
@property SInt64 nodeId;
@property (strong) Peer* peer;
@end

@implementation HelloFrame

- (BOOL) hasNodeId {
  return !!hasNodeId_;
}
- (void) setHasNodeId:(BOOL) _value_ {
  hasNodeId_ = !!_value_;
}
@synthesize nodeId;
- (BOOL) hasPeer {
  return !!hasPeer_;
}
- (void) setHasPeer:(BOOL) _value_ {
  hasPeer_ = !!_value_;
}
@synthesize peer;
- (instancetype) init {
  if ((self = [super init])) {
    self.nodeId = 0L;
    self.peer = [Peer defaultInstance];
  }
  return self;
}
static HelloFrame* defaultHelloFrameInstance = nil;
+ (void) initialize {
  if (self == [HelloFrame class]) {
    defaultHelloFrameInstance = [[HelloFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHelloFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultHelloFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNodeId) {
    return NO;
  }
  if (!self.hasPeer) {
    return NO;
  }
  if (!self.peer.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNodeId) {
    [output writeInt64:1 value:self.nodeId];
  }
  if (self.hasPeer) {
    [output writeMessage:2 value:self.peer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNodeId) {
    size_ += computeInt64Size(1, self.nodeId);
  }
  if (self.hasPeer) {
    size_ += computeMessageSize(2, self.peer);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HelloFrame*) parseFromData:(NSData*) data {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromData:data] build];
}
+ (HelloFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelloFrame*) parseFromInputStream:(NSInputStream*) input {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromInputStream:input] build];
}
+ (HelloFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromCodedInputStream:input] build];
}
+ (HelloFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloFrame*)[[[HelloFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloFrameBuilder*) builder {
  return [[HelloFrameBuilder alloc] init];
}
+ (HelloFrameBuilder*) builderWithPrototype:(HelloFrame*) prototype {
  return [[HelloFrame builder] mergeFrom:prototype];
}
- (HelloFrameBuilder*) builder {
  return [HelloFrame builder];
}
- (HelloFrameBuilder*) toBuilder {
  return [HelloFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNodeId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nodeId", [NSNumber numberWithLongLong:self.nodeId]];
  }
  if (self.hasPeer) {
    [output appendFormat:@"%@%@ {\n", indent, @"peer"];
    [self.peer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasNodeId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.nodeId] forKey: @"nodeId"];
  }
  if (self.hasPeer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.peer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"peer"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HelloFrame class]]) {
    return NO;
  }
  HelloFrame *otherMessage = other;
  return
      self.hasNodeId == otherMessage.hasNodeId &&
      (!self.hasNodeId || self.nodeId == otherMessage.nodeId) &&
      self.hasPeer == otherMessage.hasPeer &&
      (!self.hasPeer || [self.peer isEqual:otherMessage.peer]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasNodeId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.nodeId] hash];
  }
  if (self.hasPeer) {
    hashCode = hashCode * 31 + [self.peer hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HelloFrameBuilder()
@property (strong) HelloFrame* resultHelloFrame;
@end

@implementation HelloFrameBuilder
@synthesize resultHelloFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHelloFrame = [[HelloFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHelloFrame;
}
- (HelloFrameBuilder*) clear {
  self.resultHelloFrame = [[HelloFrame alloc] init];
  return self;
}
- (HelloFrameBuilder*) clone {
  return [HelloFrame builderWithPrototype:resultHelloFrame];
}
- (HelloFrame*) defaultInstance {
  return [HelloFrame defaultInstance];
}
- (HelloFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelloFrame*) buildPartial {
  HelloFrame* returnMe = resultHelloFrame;
  self.resultHelloFrame = nil;
  return returnMe;
}
- (HelloFrameBuilder*) mergeFrom:(HelloFrame*) other {
  if (other == [HelloFrame defaultInstance]) {
    return self;
  }
  if (other.hasNodeId) {
    [self setNodeId:other.nodeId];
  }
  if (other.hasPeer) {
    [self mergePeer:other.peer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelloFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelloFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setNodeId:[input readInt64]];
        break;
      }
      case 18: {
        PeerBuilder* subBuilder = [Peer builder];
        if (self.hasPeer) {
          [subBuilder mergeFrom:self.peer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPeer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasNodeId {
  return resultHelloFrame.hasNodeId;
}
- (SInt64) nodeId {
  return resultHelloFrame.nodeId;
}
- (HelloFrameBuilder*) setNodeId:(SInt64) value {
  resultHelloFrame.hasNodeId = YES;
  resultHelloFrame.nodeId = value;
  return self;
}
- (HelloFrameBuilder*) clearNodeId {
  resultHelloFrame.hasNodeId = NO;
  resultHelloFrame.nodeId = 0L;
  return self;
}
- (BOOL) hasPeer {
  return resultHelloFrame.hasPeer;
}
- (Peer*) peer {
  return resultHelloFrame.peer;
}
- (HelloFrameBuilder*) setPeer:(Peer*) value {
  resultHelloFrame.hasPeer = YES;
  resultHelloFrame.peer = value;
  return self;
}
- (HelloFrameBuilder*) setPeerBuilder:(PeerBuilder*) builderForValue {
  return [self setPeer:[builderForValue build]];
}
- (HelloFrameBuilder*) mergePeer:(Peer*) value {
  if (resultHelloFrame.hasPeer &&
      resultHelloFrame.peer != [Peer defaultInstance]) {
    resultHelloFrame.peer =
      [[[Peer builderWithPrototype:resultHelloFrame.peer] mergeFrom:value] buildPartial];
  } else {
    resultHelloFrame.peer = value;
  }
  resultHelloFrame.hasPeer = YES;
  return self;
}
- (HelloFrameBuilder*) clearPeer {
  resultHelloFrame.hasPeer = NO;
  resultHelloFrame.peer = [Peer defaultInstance];
  return self;
}
@end

@interface HeartbeatFrame ()
@end

@implementation HeartbeatFrame

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static HeartbeatFrame* defaultHeartbeatFrameInstance = nil;
+ (void) initialize {
  if (self == [HeartbeatFrame class]) {
    defaultHeartbeatFrameInstance = [[HeartbeatFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeartbeatFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultHeartbeatFrameInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HeartbeatFrame*) parseFromData:(NSData*) data {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromData:data] build];
}
+ (HeartbeatFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HeartbeatFrame*) parseFromInputStream:(NSInputStream*) input {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromInputStream:input] build];
}
+ (HeartbeatFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeartbeatFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromCodedInputStream:input] build];
}
+ (HeartbeatFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HeartbeatFrame*)[[[HeartbeatFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeartbeatFrameBuilder*) builder {
  return [[HeartbeatFrameBuilder alloc] init];
}
+ (HeartbeatFrameBuilder*) builderWithPrototype:(HeartbeatFrame*) prototype {
  return [[HeartbeatFrame builder] mergeFrom:prototype];
}
- (HeartbeatFrameBuilder*) builder {
  return [HeartbeatFrame builder];
}
- (HeartbeatFrameBuilder*) toBuilder {
  return [HeartbeatFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HeartbeatFrame class]]) {
    return NO;
  }
  HeartbeatFrame *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeartbeatFrameBuilder()
@property (strong) HeartbeatFrame* resultHeartbeatFrame;
@end

@implementation HeartbeatFrameBuilder
@synthesize resultHeartbeatFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHeartbeatFrame = [[HeartbeatFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHeartbeatFrame;
}
- (HeartbeatFrameBuilder*) clear {
  self.resultHeartbeatFrame = [[HeartbeatFrame alloc] init];
  return self;
}
- (HeartbeatFrameBuilder*) clone {
  return [HeartbeatFrame builderWithPrototype:resultHeartbeatFrame];
}
- (HeartbeatFrame*) defaultInstance {
  return [HeartbeatFrame defaultInstance];
}
- (HeartbeatFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HeartbeatFrame*) buildPartial {
  HeartbeatFrame* returnMe = resultHeartbeatFrame;
  self.resultHeartbeatFrame = nil;
  return returnMe;
}
- (HeartbeatFrameBuilder*) mergeFrom:(HeartbeatFrame*) other {
  if (other == [HeartbeatFrame defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeartbeatFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeartbeatFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface PayloadFrame ()
@property (strong) NSData* payload;
@end

@implementation PayloadFrame

- (BOOL) hasPayload {
  return !!hasPayload_;
}
- (void) setHasPayload:(BOOL) _value_ {
  hasPayload_ = !!_value_;
}
@synthesize payload;
- (instancetype) init {
  if ((self = [super init])) {
    self.payload = [NSData data];
  }
  return self;
}
static PayloadFrame* defaultPayloadFrameInstance = nil;
+ (void) initialize {
  if (self == [PayloadFrame class]) {
    defaultPayloadFrameInstance = [[PayloadFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPayloadFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultPayloadFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPayload) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPayload) {
    [output writeData:1 value:self.payload];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPayload) {
    size_ += computeDataSize(1, self.payload);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PayloadFrame*) parseFromData:(NSData*) data {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromData:data] build];
}
+ (PayloadFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PayloadFrame*) parseFromInputStream:(NSInputStream*) input {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromInputStream:input] build];
}
+ (PayloadFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PayloadFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromCodedInputStream:input] build];
}
+ (PayloadFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PayloadFrame*)[[[PayloadFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PayloadFrameBuilder*) builder {
  return [[PayloadFrameBuilder alloc] init];
}
+ (PayloadFrameBuilder*) builderWithPrototype:(PayloadFrame*) prototype {
  return [[PayloadFrame builder] mergeFrom:prototype];
}
- (PayloadFrameBuilder*) builder {
  return [PayloadFrame builder];
}
- (PayloadFrameBuilder*) toBuilder {
  return [PayloadFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPayload) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payload", self.payload];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPayload) {
    [dictionary setObject: self.payload forKey: @"payload"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PayloadFrame class]]) {
    return NO;
  }
  PayloadFrame *otherMessage = other;
  return
      self.hasPayload == otherMessage.hasPayload &&
      (!self.hasPayload || [self.payload isEqual:otherMessage.payload]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPayload) {
    hashCode = hashCode * 31 + [self.payload hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PayloadFrameBuilder()
@property (strong) PayloadFrame* resultPayloadFrame;
@end

@implementation PayloadFrameBuilder
@synthesize resultPayloadFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPayloadFrame = [[PayloadFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPayloadFrame;
}
- (PayloadFrameBuilder*) clear {
  self.resultPayloadFrame = [[PayloadFrame alloc] init];
  return self;
}
- (PayloadFrameBuilder*) clone {
  return [PayloadFrame builderWithPrototype:resultPayloadFrame];
}
- (PayloadFrame*) defaultInstance {
  return [PayloadFrame defaultInstance];
}
- (PayloadFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PayloadFrame*) buildPartial {
  PayloadFrame* returnMe = resultPayloadFrame;
  self.resultPayloadFrame = nil;
  return returnMe;
}
- (PayloadFrameBuilder*) mergeFrom:(PayloadFrame*) other {
  if (other == [PayloadFrame defaultInstance]) {
    return self;
  }
  if (other.hasPayload) {
    [self setPayload:other.payload];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PayloadFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PayloadFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPayload:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasPayload {
  return resultPayloadFrame.hasPayload;
}
- (NSData*) payload {
  return resultPayloadFrame.payload;
}
- (PayloadFrameBuilder*) setPayload:(NSData*) value {
  resultPayloadFrame.hasPayload = YES;
  resultPayloadFrame.payload = value;
  return self;
}
- (PayloadFrameBuilder*) clearPayload {
  resultPayloadFrame.hasPayload = NO;
  resultPayloadFrame.payload = [NSData data];
  return self;
}
@end

@interface PortsFrame ()
@property (strong) NSData* address;
@property (strong) PBAppendableArray * portsArray;
@end

@implementation PortsFrame

- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
@synthesize portsArray;
@dynamic ports;
- (instancetype) init {
  if ((self = [super init])) {
    self.address = [NSData data];
  }
  return self;
}
static PortsFrame* defaultPortsFrameInstance = nil;
+ (void) initialize {
  if (self == [PortsFrame class]) {
    defaultPortsFrameInstance = [[PortsFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultPortsFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultPortsFrameInstance;
}
- (PBArray *)ports {
  return portsArray;
}
- (SInt32)portsAtIndex:(NSUInteger)index {
  return [portsArray int32AtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasAddress) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAddress) {
    [output writeData:1 value:self.address];
  }
  const NSUInteger portsArrayCount = self.portsArray.count;
  if (portsArrayCount > 0) {
    const SInt32 *values = (const SInt32 *)self.portsArray.data;
    for (NSUInteger i = 0; i < portsArrayCount; ++i) {
      [output writeInt32:2 value:values[i]];
    }
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAddress) {
    size_ += computeDataSize(1, self.address);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.portsArray.count;
    const SInt32 *values = (const SInt32 *)self.portsArray.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PortsFrame*) parseFromData:(NSData*) data {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromData:data] build];
}
+ (PortsFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PortsFrame*) parseFromInputStream:(NSInputStream*) input {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromInputStream:input] build];
}
+ (PortsFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PortsFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromCodedInputStream:input] build];
}
+ (PortsFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PortsFrame*)[[[PortsFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PortsFrameBuilder*) builder {
  return [[PortsFrameBuilder alloc] init];
}
+ (PortsFrameBuilder*) builderWithPrototype:(PortsFrame*) prototype {
  return [[PortsFrame builder] mergeFrom:prototype];
}
- (PortsFrameBuilder*) builder {
  return [PortsFrame builder];
}
- (PortsFrameBuilder*) toBuilder {
  return [PortsFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  [self.portsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ports", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  NSMutableArray * portsArrayArray = [NSMutableArray new];
  NSUInteger portsArrayCount=self.portsArray.count;
  for(int i=0;i<portsArrayCount;i++){
    [portsArrayArray addObject: @([self.portsArray int32AtIndex:i])];
  }
  [dictionary setObject: portsArrayArray forKey: @"ports"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PortsFrame class]]) {
    return NO;
  }
  PortsFrame *otherMessage = other;
  return
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      [self.portsArray isEqualToArray:otherMessage.portsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  [self.portsArray enumerateObjectsUsingBlock:^(NSNumber *obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PortsFrameBuilder()
@property (strong) PortsFrame* resultPortsFrame;
@end

@implementation PortsFrameBuilder
@synthesize resultPortsFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPortsFrame = [[PortsFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPortsFrame;
}
- (PortsFrameBuilder*) clear {
  self.resultPortsFrame = [[PortsFrame alloc] init];
  return self;
}
- (PortsFrameBuilder*) clone {
  return [PortsFrame builderWithPrototype:resultPortsFrame];
}
- (PortsFrame*) defaultInstance {
  return [PortsFrame defaultInstance];
}
- (PortsFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PortsFrame*) buildPartial {
  PortsFrame* returnMe = resultPortsFrame;
  self.resultPortsFrame = nil;
  return returnMe;
}
- (PortsFrameBuilder*) mergeFrom:(PortsFrame*) other {
  if (other == [PortsFrame defaultInstance]) {
    return self;
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.portsArray.count > 0) {
    if (resultPortsFrame.portsArray == nil) {
      resultPortsFrame.portsArray = [other.portsArray copy];
    } else {
      [resultPortsFrame.portsArray appendArray:other.portsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PortsFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PortsFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAddress:[input readData]];
        break;
      }
      case 16: {
        [self addPorts:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAddress {
  return resultPortsFrame.hasAddress;
}
- (NSData*) address {
  return resultPortsFrame.address;
}
- (PortsFrameBuilder*) setAddress:(NSData*) value {
  resultPortsFrame.hasAddress = YES;
  resultPortsFrame.address = value;
  return self;
}
- (PortsFrameBuilder*) clearAddress {
  resultPortsFrame.hasAddress = NO;
  resultPortsFrame.address = [NSData data];
  return self;
}
- (PBAppendableArray *)ports {
  return resultPortsFrame.portsArray;
}
- (SInt32)portsAtIndex:(NSUInteger)index {
  return [resultPortsFrame portsAtIndex:index];
}
- (PortsFrameBuilder *)addPorts:(SInt32)value {
  if (resultPortsFrame.portsArray == nil) {
    resultPortsFrame.portsArray = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [resultPortsFrame.portsArray addInt32:value];
  return self;
}
- (PortsFrameBuilder *)setPortsArray:(NSArray *)array {
  resultPortsFrame.portsArray = [PBAppendableArray arrayWithArray:array valueType:PBArrayValueTypeInt32];
  return self;
}
- (PortsFrameBuilder *)setPortsValues:(const SInt32 *)values count:(NSUInteger)count {
  resultPortsFrame.portsArray = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (PortsFrameBuilder *)clearPorts {
  resultPortsFrame.portsArray = nil;
  return self;
}
@end

@interface ConnectedFrame ()
@property (strong) Peer* peer;
@end

@implementation ConnectedFrame

- (BOOL) hasPeer {
  return !!hasPeer_;
}
- (void) setHasPeer:(BOOL) _value_ {
  hasPeer_ = !!_value_;
}
@synthesize peer;
- (instancetype) init {
  if ((self = [super init])) {
    self.peer = [Peer defaultInstance];
  }
  return self;
}
static ConnectedFrame* defaultConnectedFrameInstance = nil;
+ (void) initialize {
  if (self == [ConnectedFrame class]) {
    defaultConnectedFrameInstance = [[ConnectedFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConnectedFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultConnectedFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPeer) {
    return NO;
  }
  if (!self.peer.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPeer) {
    [output writeMessage:1 value:self.peer];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPeer) {
    size_ += computeMessageSize(1, self.peer);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConnectedFrame*) parseFromData:(NSData*) data {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromData:data] build];
}
+ (ConnectedFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConnectedFrame*) parseFromInputStream:(NSInputStream*) input {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromInputStream:input] build];
}
+ (ConnectedFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectedFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromCodedInputStream:input] build];
}
+ (ConnectedFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConnectedFrame*)[[[ConnectedFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConnectedFrameBuilder*) builder {
  return [[ConnectedFrameBuilder alloc] init];
}
+ (ConnectedFrameBuilder*) builderWithPrototype:(ConnectedFrame*) prototype {
  return [[ConnectedFrame builder] mergeFrom:prototype];
}
- (ConnectedFrameBuilder*) builder {
  return [ConnectedFrame builder];
}
- (ConnectedFrameBuilder*) toBuilder {
  return [ConnectedFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPeer) {
    [output appendFormat:@"%@%@ {\n", indent, @"peer"];
    [self.peer writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPeer) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.peer storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"peer"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConnectedFrame class]]) {
    return NO;
  }
  ConnectedFrame *otherMessage = other;
  return
      self.hasPeer == otherMessage.hasPeer &&
      (!self.hasPeer || [self.peer isEqual:otherMessage.peer]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPeer) {
    hashCode = hashCode * 31 + [self.peer hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConnectedFrameBuilder()
@property (strong) ConnectedFrame* resultConnectedFrame;
@end

@implementation ConnectedFrameBuilder
@synthesize resultConnectedFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConnectedFrame = [[ConnectedFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConnectedFrame;
}
- (ConnectedFrameBuilder*) clear {
  self.resultConnectedFrame = [[ConnectedFrame alloc] init];
  return self;
}
- (ConnectedFrameBuilder*) clone {
  return [ConnectedFrame builderWithPrototype:resultConnectedFrame];
}
- (ConnectedFrame*) defaultInstance {
  return [ConnectedFrame defaultInstance];
}
- (ConnectedFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConnectedFrame*) buildPartial {
  ConnectedFrame* returnMe = resultConnectedFrame;
  self.resultConnectedFrame = nil;
  return returnMe;
}
- (ConnectedFrameBuilder*) mergeFrom:(ConnectedFrame*) other {
  if (other == [ConnectedFrame defaultInstance]) {
    return self;
  }
  if (other.hasPeer) {
    [self mergePeer:other.peer];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConnectedFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConnectedFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        PeerBuilder* subBuilder = [Peer builder];
        if (self.hasPeer) {
          [subBuilder mergeFrom:self.peer];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPeer:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPeer {
  return resultConnectedFrame.hasPeer;
}
- (Peer*) peer {
  return resultConnectedFrame.peer;
}
- (ConnectedFrameBuilder*) setPeer:(Peer*) value {
  resultConnectedFrame.hasPeer = YES;
  resultConnectedFrame.peer = value;
  return self;
}
- (ConnectedFrameBuilder*) setPeerBuilder:(PeerBuilder*) builderForValue {
  return [self setPeer:[builderForValue build]];
}
- (ConnectedFrameBuilder*) mergePeer:(Peer*) value {
  if (resultConnectedFrame.hasPeer &&
      resultConnectedFrame.peer != [Peer defaultInstance]) {
    resultConnectedFrame.peer =
      [[[Peer builderWithPrototype:resultConnectedFrame.peer] mergeFrom:value] buildPartial];
  } else {
    resultConnectedFrame.peer = value;
  }
  resultConnectedFrame.hasPeer = YES;
  return self;
}
- (ConnectedFrameBuilder*) clearPeer {
  resultConnectedFrame.hasPeer = NO;
  resultConnectedFrame.peer = [Peer defaultInstance];
  return self;
}
@end

@interface DisconnectedFrame ()
@property (strong) NSData* address;
@end

@implementation DisconnectedFrame

- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) _value_ {
  hasAddress_ = !!_value_;
}
@synthesize address;
- (instancetype) init {
  if ((self = [super init])) {
    self.address = [NSData data];
  }
  return self;
}
static DisconnectedFrame* defaultDisconnectedFrameInstance = nil;
+ (void) initialize {
  if (self == [DisconnectedFrame class]) {
    defaultDisconnectedFrameInstance = [[DisconnectedFrame alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDisconnectedFrameInstance;
}
- (instancetype) defaultInstance {
  return defaultDisconnectedFrameInstance;
}
- (BOOL) isInitialized {
  if (!self.hasAddress) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAddress) {
    [output writeData:1 value:self.address];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAddress) {
    size_ += computeDataSize(1, self.address);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DisconnectedFrame*) parseFromData:(NSData*) data {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromData:data] build];
}
+ (DisconnectedFrame*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DisconnectedFrame*) parseFromInputStream:(NSInputStream*) input {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromInputStream:input] build];
}
+ (DisconnectedFrame*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DisconnectedFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromCodedInputStream:input] build];
}
+ (DisconnectedFrame*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DisconnectedFrame*)[[[DisconnectedFrame builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DisconnectedFrameBuilder*) builder {
  return [[DisconnectedFrameBuilder alloc] init];
}
+ (DisconnectedFrameBuilder*) builderWithPrototype:(DisconnectedFrame*) prototype {
  return [[DisconnectedFrame builder] mergeFrom:prototype];
}
- (DisconnectedFrameBuilder*) builder {
  return [DisconnectedFrame builder];
}
- (DisconnectedFrameBuilder*) toBuilder {
  return [DisconnectedFrame builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAddress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"address", self.address];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasAddress) {
    [dictionary setObject: self.address forKey: @"address"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DisconnectedFrame class]]) {
    return NO;
  }
  DisconnectedFrame *otherMessage = other;
  return
      self.hasAddress == otherMessage.hasAddress &&
      (!self.hasAddress || [self.address isEqual:otherMessage.address]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAddress) {
    hashCode = hashCode * 31 + [self.address hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DisconnectedFrameBuilder()
@property (strong) DisconnectedFrame* resultDisconnectedFrame;
@end

@implementation DisconnectedFrameBuilder
@synthesize resultDisconnectedFrame;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDisconnectedFrame = [[DisconnectedFrame alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDisconnectedFrame;
}
- (DisconnectedFrameBuilder*) clear {
  self.resultDisconnectedFrame = [[DisconnectedFrame alloc] init];
  return self;
}
- (DisconnectedFrameBuilder*) clone {
  return [DisconnectedFrame builderWithPrototype:resultDisconnectedFrame];
}
- (DisconnectedFrame*) defaultInstance {
  return [DisconnectedFrame defaultInstance];
}
- (DisconnectedFrame*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DisconnectedFrame*) buildPartial {
  DisconnectedFrame* returnMe = resultDisconnectedFrame;
  self.resultDisconnectedFrame = nil;
  return returnMe;
}
- (DisconnectedFrameBuilder*) mergeFrom:(DisconnectedFrame*) other {
  if (other == [DisconnectedFrame defaultInstance]) {
    return self;
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DisconnectedFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DisconnectedFrameBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setAddress:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasAddress {
  return resultDisconnectedFrame.hasAddress;
}
- (NSData*) address {
  return resultDisconnectedFrame.address;
}
- (DisconnectedFrameBuilder*) setAddress:(NSData*) value {
  resultDisconnectedFrame.hasAddress = YES;
  resultDisconnectedFrame.address = value;
  return self;
}
- (DisconnectedFrameBuilder*) clearAddress {
  resultDisconnectedFrame.hasAddress = NO;
  resultDisconnectedFrame.address = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
